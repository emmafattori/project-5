{"version":3,"sources":["firebase.js","GoodMorning.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","GoodMorning","handleNameChange","event","setState","userFirstName","target","value","handleSubmitName","preventDefault","firstNameToAdd","state","props","selectedLang","nameOnPage","className","id","this","onSubmit","htmlFor","type","name","placeholder","onChange","autoComplete","role","alt","Component","App","handleChangeTitle","userInput","handlePlanSubmit","planToBeAdded","dbRef","database","ref","plansList","length","push","MySwal","withReactContent","Swal","fire","onOpen","clickConfirm","then","title","icon","text","deleteItem","child","remove","languageToggle","inputLabel","morning","submitName","newPlan","planButton","langButton","on","snapshot","plans","val","newPlans","key","individualPlanObject","planId","planTitle","onClick","map","planValue","i","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2de5870b.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/database'\n\n const firebaseConfig = {\n    apiKey: \"AIzaSyApUdhpyr3u1Zu_5yLiqhncbaw6CXuXYI8\",\n    authDomain: \"daily-planner-app-71520.firebaseapp.com\",\n    databaseURL: \"https://daily-planner-app-71520.firebaseio.com\",\n    projectId: \"daily-planner-app-71520\",\n    storageBucket: \"daily-planner-app-71520.appspot.com\",\n    messagingSenderId: \"595096002439\",\n    appId: \"1:595096002439:web:a753e1b29f17565c967d22\"\n  };\n\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport './App.css';\n\nclass GoodMorning extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\t\tuserFirstName: '',\n\t\t\t\tnameOnPage: '',\n\t\t\t\t\n\t\t\t};\n\t}\n\n\t// Function to handle name of user text input change\n\thandleNameChange = (event) => {\n\t\tthis.setState({\n\t\t\tuserFirstName: event.target.value\n\t\t})\n\t}\n\n\t// Function to handle user submitting name\n\thandleSubmitName = (event) => {\n\t\tevent.preventDefault()\n\t\tconst firstNameToAdd = this.state.userFirstName;\n\t\tif(this.props.selectedLang === 'eng'){\n\t\t\tthis.setState({\n\t\t\t\tnameOnPage: 'Good Morning ' + firstNameToAdd\n\t\t\t})\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tnameOnPage: 'Bon Matin ' + firstNameToAdd\n\t\t\t})\n\t\t\t\n\t\t}\n\n\t}\n\n\t// Render method\n\trender() {\n\t\n\t\treturn (\n\t\t\t<div className=\"welcome-component\">\n\n\t\t\t\t<h1 id=\"title\">\n\t\t\t\t\t{this.props.selectedLang === 'eng' ? 'Today\\'s Plan' : \"Plan du Jour\"}\n\t\t\t\t</h1>\n\t\t\t\t{/* Form for user to enter their first name */}\n\t\t\t\t<div className=\"enter-name\">\n\t\t\t\t\t<form onSubmit={this.handleSubmitName} >\n\n\t\t\t\t\t\t<label htmlFor=\"name\" className=\"visually-hidden\"></label>\n\t\t\t\t\t\t<input className=\"text-input\"type=\"text\" name=\"name\" id=\"name\" placeholder=\"Name/Nom\"\n\t\t\t\t\t\tvalue={this.state.userFirstName} onChange={this.handleNameChange} autoComplete=\"off\"/>\n\n\t\t\t\t\t\t<label className=\"visually-hidden\" htmlFor=\"submit plan\">Submit Plan</label>\n\t\t\t\t\t\t<input className = \"save-day\" name=\"submit plan\"type=\"submit\" value={this.props.selectedLang === 'eng' ? 'Submit' : 'Soumettre'}/>\n\t\t\t\t\t</form>\n\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<span className=\"visually-hidden good-morning\"role=\"img\" alt=\"emoji of sun\">☀️</span> {this.state.nameOnPage}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default GoodMorning","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport GoodMorning from './GoodMorning';\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n\n\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\t\n\t\tthis.state = {\n\t\t\t\tuserFirstName: '',\n\t\t\t\tplansList: [],\n\t\t\t\tuserInput: '', \n\t\t\t\tselectedLang: 'eng',\n\t\t\t\tinputLabel: {\n\n\t\t\t\t\t'eng' :{\n\t\t\t\t\t\ttitle: \"Today's Plan\", \n\t\t\t\t\t\tmorning: \"Good Morning\",\n\t\t\t\t\t\tsubmitName: \"Submit\",\n\t\t\t\t\t\tnewPlan: \"Add new plan\",\n\t\t\t\t\t\tplanButton: \"Add\", \n\t\t\t\t\t\tlangButton: \"FR\"\n\t\t\t\t\t}, \n\t\t\t\t\t'fr': {\n\t\t\t\t\t\ttitle: \"Plan du Jour\",\n\t\t\t\t\t\tmorning: \"Bon Matin\",\n\t\t\t\t\t\tsubmitName: \"Soumettre\",\n\t\t\t\t\t\tnewPlan: \"Ajouter un plan à votre journée\",\n\t\t\t\t\t\tplanButton: \"Ajouter\",\n\t\t\t\t\t\tlangButton: \"EN\"\n\t\t\t}\n\t\t\t\t\n\t\t\t\t}\t\t\t\n\t\t\t};\n\t}\n\n\tcomponentDidMount(){\n\t\tconst dbRef = firebase.database().ref();\n\t\t// Adding items into firebase\n\t\tdbRef.on('value', (snapshot) => {\n\t\t\tconst plans = snapshot.val();\n\n\t\t\tconst newPlans = []\n\t\t\tfor(let key in plans){\n\t\t\t\tconst individualPlanObject = {\n\t\t\t\t\tplanId: key, \n\t\t\t\t\tplanTitle: plans[key]\n\t\t\t\t}\n\n\t\t\t\tnewPlans.push(individualPlanObject)\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tplansList: newPlans\n\t\t\t})\n\t\t})\n\n\t\t\n\t}\n\n\t// Function to handle change in state of new plan\n\thandleChangeTitle = (event) => {\n\t\tthis.setState({\n\t\t\tuserInput: event.target.value\n\t\t})\n\t}\n\n// Function to handle when each plan is added into the list\n\thandlePlanSubmit = (event) => {\n\t\tevent.preventDefault()\n\t\tconst planToBeAdded = this.state.userInput;\n\t\tconst dbRef = firebase.database().ref();\n\t\t\n\t\tif(this.state.userInput !== '' && this.state.plansList.length <= 5){\n\n\t\t\tdbRef.push(planToBeAdded)\n\t\t\tthis.setState({\n\t\t\t\tuserInput: ''\n\t\t\t})\n\t\t} else {\n\t\t\tconst MySwal = withReactContent(Swal)\n\t\t\t// Error handling: user will get an alert if they have too many plans in one day.\n\t\t\tMySwal.fire({\n \t\t\t\t onOpen: () => {\n    \t\t\t\tMySwal.clickConfirm()\n  \t\t\t\t}\n\t\t\t}).then(() => {\n\t\t\t\t\n  \t\t\t\treturn MySwal.fire({\n\t\t\t\t\t  title: \"Hello Planner!\",\n\t\t\t\t\t  icon: \"warning\",\n\t\t\t\t\t  text: \"It seems like you have a busy day already. Let's prioritize your list so that you can have a balanced day ☮️.\"\n\t\t\t\t  })\n\t\t\t})\t\n\t\t}\n\t}\n// Function to remove the item from the page & firebase if garbage can icon is clicked\n\tdeleteItem = (event) => {\n\t\tconst dbRef = firebase.database().ref();\n\t\tdbRef.child(event.target.id).remove()\n\t}\n\n// Function to change the copy language based on the user's button click.\n\tlanguageToggle = (event) => {\n\t\tevent.preventDefault()\n\n\t\tif(this.state.selectedLang === 'eng'){\n\t\t\tthis.setState({\n\t\t\tselectedLang: 'fr'\n\t\t})\n\t\t} else{\n\t\t\tthis.setState({\n\t\t\t\tselectedLang: 'eng'\n\t\t\t})\n\t\t}\n\n\t}\n// Render Method\n\n\trender(){\n\t\t\n  \t\treturn (\n\t\t\n    \t\t<div className=\"app-container\">\n\t\t\t\t{/* Imported Component \"Good Morning\" */}\n\t\t\t\t<GoodMorning selectedLang = {this.state.selectedLang}/>\n\n\t\t\t\t{/* Button for toggling French Copy */}\n\t\t\t\t\n\t\t\t\t<button onClick={this.languageToggle}className=\"french-button\" id=\"langButton\">{this.state.inputLabel[this.state.selectedLang].langButton}</button>\n\n\t\t\t\t{/* Add new plan section */}\n\t\t\t\t<div className=\"add-plan\">\t\t\n\t\t\t\t\t<p id=\"add\">\n\t\t\t\t\t\t{this.state.inputLabel[this.state.selectedLang].newPlan}</p>\n\n\t\t\t\t\t  {/* Form to handle adding new plans */}\n\t\t\t\t\t  <form onSubmit={this.handlePlanSubmit}>\n\n\t\t\t\t\t\t <label className=\"visually-hidden\"htmlFor=\"planTitle\">Add a new plan here</label>\n\t\t\t\t\t     <input className=\"text-input\" id=\"planTitle\" type=\"text\" value={this.state.userInput} placeholder=\"Ex: Call Mom/Appelez Maman\"onChange={this.handleChangeTitle} autoComplete=\"off\"/>\n\n\t\t\t\t\t\t <label className=\"visually-hidden\" htmlFor=\"plan-button\">Add Item to your day</label>  \n\t\t\t\t\t\t <button id=\"plan-button\"className=\"save-day\" type=\"submit\" name=\"plan-buttom\">{this.state.inputLabel[this.state.selectedLang].planButton}</button>\n\t\t\t\t \t  </form>\n\t\t\t\t</div>\n\n\t\t\t\t{/* List of plans section */}\n\t\t\t\t<div className=\"plan-result\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{this.state.plansList.map( (planValue, i) => {\n\t\t\t\t\t\t  return(\n\t\t\t\t\t\t\t  <div className=\"plan-item\">\n\t\t\t\t\t\t\t \t <li key={i}>{planValue.planTitle}</li><span className=\"delete\"><i className=\"far fa-trash-alt\" id={planValue.planId} onClick={this.deleteItem}></i>\n\t\t\t\t\t\t\t\t  </span>\n\n\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t  \t\t)\n\t\t\t\t\t  })}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\n    \t\t</div>\n\n  \t\t);\n\n\t}\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}