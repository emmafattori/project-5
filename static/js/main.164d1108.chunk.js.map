{"version":3,"sources":["firebase.js","GoodMorning.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","GoodMorning","handleNameChange","event","setState","userFirstName","target","value","console","log","state","handleSubmitName","preventDefault","firstNameToAdd","nameOnPage","showNameResults","className","id","this","props","selectedLang","onSubmit","type","name","placeholder","onChange","autoComplete","role","alt","Component","App","handleChangeTitle","userInput","handlePlanSubmit","planToBeAdded","dbRef","database","ref","plansList","length","push","MySwal","withReactContent","Swal","fire","onOpen","clickConfirm","then","title","icon","text","deleteItem","child","remove","languageToggle","inputLabel","morning","submitName","newPlan","planButton","langButton","on","snapshot","plans","val","newPlans","key","individualPlanObject","planId","planTitle","onClick","htmlFor","map","planValue","i","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uTAcEA,IAASC,cAXa,CACpBC,OAAQ,0CACRC,WAAY,0CACZC,YAAa,iDACbC,UAAW,0BACXC,cAAe,sCACfC,kBAAmB,eACnBC,MAAO,8CAMIR,QAAf,ECwCeS,G,kBApDd,aAAc,IAAD,8BACZ,+CASDC,iBAAmB,SAACC,GACnB,EAAKC,SAAS,CACbC,cAAeF,EAAMG,OAAOC,QAE7BC,QAAQC,IAAI,EAAKC,MAAML,gBAdX,EAiBbM,iBAAmB,SAACR,GACnBA,EAAMS,iBACN,IAAMC,EAAiB,EAAKH,MAAML,cAClC,EAAKD,SAAS,CACbU,WAAYD,EACZE,iBAAiB,KApBlB,EAAKL,MAAQ,CACXL,cAAe,GACfS,WAAY,IAJF,E,sEA4BZ,OACC,yBAAKE,UAAU,qBAGd,wBAAIC,GAAG,SACuB,QAA5BC,KAAKC,MAAMC,aAAyB,eAAkB,gBAGxD,yBAAKJ,UAAU,cACd,0BAAMK,SAAUH,KAAKP,kBACpB,2BAAOK,UAAU,aAAYM,KAAK,OAAOC,KAAK,OAAON,GAAG,OAAOO,YAAY,kBAC3EjB,MAAOW,KAAKR,MAAML,cAAeoB,SAAUP,KAAKhB,iBAAkBwB,aAAa,QAC/E,2BAAOV,UAAY,WAAWM,KAAK,SAASf,MAAmC,QAA5BW,KAAKC,MAAMC,aAAyB,SAAW,eAEnG,2BACC,0BAAMJ,UAAU,aAAYW,KAAK,MAAMC,IAAI,gBAA3C,gBAC6B,QAA5BV,KAAKC,MAAMC,aAAyB,gBAAkB,aAAcF,KAAKR,MAAMI,kB,GA7C5De,c,kCC2LXC,E,YArLd,aAAc,IAAD,8BACZ,+CA0DD5B,iBAAmB,SAACC,GACnB,EAAKC,SAAS,CACbC,cAAeF,EAAMG,OAAOC,SA7DjB,EAiEbI,iBAAmB,SAACR,GACnBA,EAAMS,iBACN,IAAMC,EAAiB,EAAKH,MAAML,cAClCG,QAAQC,IAAII,IApEA,EAuEbkB,kBAAoB,SAAC5B,GACpB,EAAKC,SAAS,CACb4B,UAAW7B,EAAMG,OAAOC,SAzEb,EA8Eb0B,iBAAmB,SAAC9B,GACnBA,EAAMS,iBACN,IAAMsB,EAAgB,EAAKxB,MAAMsB,UAC3BG,EAAQ3C,EAAS4C,WAAWC,MAElC,GAA4B,KAAzB,EAAK3B,MAAMsB,WAAoB,EAAKtB,MAAM4B,UAAUC,QAAU,EAEhEJ,EAAMK,KAAKN,GACX,EAAK9B,SAAS,CACb4B,UAAW,SAEN,CACN,IAAMS,EAASC,IAAiBC,KAEhCF,EAAOG,KAAK,CACTC,OAAQ,WACNJ,EAAOK,kBAETC,MAAK,WAEL,OAAON,EAAOG,KAAK,CAClBI,MAAO,iBACPC,KAAM,UACNC,KAAM,iIArGC,EA2GbC,WAAa,SAAChD,GACCX,EAAS4C,WAAWC,MAC5Be,MAAMjD,EAAMG,OAAOW,IAAIoC,UA7GjB,EAiHbC,eAAiB,SAACnD,GACjBA,EAAMS,iBACNJ,QAAQC,IAAI,sBAEmB,QAA5B,EAAKC,MAAMU,aACb,EAAKhB,SAAS,CACdgB,aAAc,OAGd,EAAKhB,SAAS,CACbgB,aAAc,SAxHhB,EAAKV,MAAQ,CACXL,cAAe,GACfiC,UAAW,GACXN,UAAW,GACXZ,aAAc,MACdmC,WAAY,CAEX,IAAO,CACNP,MAAO,eACPQ,QAAS,eACTC,WAAY,SACZC,QAAS,eACTC,WAAY,MACZC,WAAY,MAEb,GAAM,CACLZ,MAAO,eACPQ,QAAS,YACTC,WAAY,YACZC,QAAS,wCACTC,WAAY,UACZC,WAAY,QAxBJ,E,iFA+BO,IAAD,OACJpE,EAAS4C,WAAWC,MAE5BwB,GAAG,SAAS,SAACC,GAClB,IAAMC,EAAQD,EAASE,MAEjBC,EAAW,GACjB,IAAI,IAAIC,KAAOH,EAAM,CAEpB,IAAMI,EAAuB,CAC5BC,OAAQF,EACRG,UAAWN,EAAMG,IAGlBD,EAASzB,KAAK2B,GAGf,EAAK/D,SAAS,CACbkC,UAAW2B,S,+BAqFL,IAAD,OAEL,OAEE,yBAAKjD,UAAU,iBAEjB,kBAAC,EAAD,CAAaI,aAAgBF,KAAKR,MAAMU,eAIxC,4BAAQkD,QAASpD,KAAKoC,eAAetC,UAAU,gBAAgBC,GAAG,cAAcC,KAAKR,MAAM6C,WAAWrC,KAAKR,MAAMU,cAAcwC,YAG/H,yBAAK5C,UAAU,YACd,uBAAGC,GAAG,OACJC,KAAKR,MAAM6C,WAAWrC,KAAKR,MAAMU,cAAcsC,SAG/C,0BAAMrC,SAAUH,KAAKe,kBACrB,2BAAOsC,QAAQ,cACf,2BAAOvD,UAAU,aAAaC,GAAG,YAAYK,KAAK,OAAOf,MAAOW,KAAKR,MAAMsB,UAAWP,SAAUP,KAAKa,kBAAmBL,aAAa,QACrI,4BAAQT,GAAG,aAAYD,UAAU,WAAWM,KAAK,UAAUJ,KAAKR,MAAM6C,WAAWrC,KAAKR,MAAMU,cAAcuC,cAK7G,yBAAK3C,UAAU,eACd,4BACEE,KAAKR,MAAM4B,UAAUkC,KAAK,SAACC,EAAWC,GACrC,OACC,yBAAK1D,UAAU,aACd,wBAAIkD,IAAKQ,GAAID,EAAUJ,WAAe,0BAAMrD,UAAU,UAAS,uBAAGA,UAAU,mBAAmBC,GAAIwD,EAAUL,OAAQE,QAAS,EAAKnB,yB,GAtK3HtB,aCIE8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.164d1108.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/database'\n\n const firebaseConfig = {\n    apiKey: \"AIzaSyApUdhpyr3u1Zu_5yLiqhncbaw6CXuXYI8\",\n    authDomain: \"daily-planner-app-71520.firebaseapp.com\",\n    databaseURL: \"https://daily-planner-app-71520.firebaseio.com\",\n    projectId: \"daily-planner-app-71520\",\n    storageBucket: \"daily-planner-app-71520.appspot.com\",\n    messagingSenderId: \"595096002439\",\n    appId: \"1:595096002439:web:a753e1b29f17565c967d22\"\n  };\n\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport './App.css';\n\nclass GoodMorning extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\t\tuserFirstName: '',\n\t\t\t\tnameOnPage: '',\n\t\t\t\t\n\t\t\t};\n\t}\n\n\n\thandleNameChange = (event) => {\n\t\tthis.setState({\n\t\t\tuserFirstName: event.target.value\n\t\t})\n\t\tconsole.log(this.state.userFirstName);\n\t}\n\n\thandleSubmitName = (event) => {\n\t\tevent.preventDefault()\n\t\tconst firstNameToAdd = this.state.userFirstName;\n\t\tthis.setState({\n\t\t\tnameOnPage: firstNameToAdd,\n\t\t\tshowNameResults: true\n\t\t})\n\n\t}\n\trender() {\n\t\n\t\treturn (\n\t\t\t<div className=\"welcome-component\">\n\n\t\t\t\t\n\t\t\t\t<h1 id=\"title\">\n\t\t\t\t\t{this.props.selectedLang === 'eng' ? 'Today\\'s Plan' : \"Plan du Jour\"}\n\t\t\t\t</h1>\n\t\t\t\t\n\t\t\t\t<div className=\"enter-name\">\n\t\t\t\t\t<form onSubmit={this.handleSubmitName} >\n\t\t\t\t\t\t<input className=\"text-input\"type=\"text\" name=\"name\" id=\"name\" placeholder=\"Enter Your Name\"\n\t\t\t\t\t\tvalue={this.state.userFirstName} onChange={this.handleNameChange} autoComplete=\"off\"/>\n\t\t\t\t\t\t<input className = \"save-day\" type=\"submit\" value={this.props.selectedLang === 'eng' ? 'Submit' : 'Soumettre'}/>\n\t\t\t\t\t</form>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<span className=\"aria-label\"role=\"img\" alt=\"emoji of sun\">☀️</span>\n\t\t\t\t\t\t{this.props.selectedLang === 'eng' ? 'Good Morning ' : 'Bon Matin '}{this.state.nameOnPage} \n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default GoodMorning","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport GoodMorning from './GoodMorning';\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n\n\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\t\n\t\tthis.state = {\n\t\t\t\tuserFirstName: '',\n\t\t\t\tplansList: [],\n\t\t\t\tuserInput: '', \n\t\t\t\tselectedLang: 'eng',\n\t\t\t\tinputLabel: {\n\n\t\t\t\t\t'eng' :{\n\t\t\t\t\t\ttitle: \"Today's Plan\", \n\t\t\t\t\t\tmorning: \"Good Morning\",\n\t\t\t\t\t\tsubmitName: \"Submit\",\n\t\t\t\t\t\tnewPlan: \"Add new plan\",\n\t\t\t\t\t\tplanButton: \"Add\", \n\t\t\t\t\t\tlangButton: \"FR\"\n\t\t\t\t\t}, \n\t\t\t\t\t'fr': {\n\t\t\t\t\t\ttitle: \"Plan du Jour\",\n\t\t\t\t\t\tmorning: \"Bon Matin\",\n\t\t\t\t\t\tsubmitName: \"Soumettre\",\n\t\t\t\t\t\tnewPlan: \"Ajouter un plan à votre journée\",\n\t\t\t\t\t\tplanButton: \"Ajouter\",\n\t\t\t\t\t\tlangButton: \"EN\"\n\t\t\t}\n\t\t\t\t\n\t\t\t\t}\t\t\t\n\t\t\t};\n\t}\n\n\tcomponentDidMount(){\n\t\tconst dbRef = firebase.database().ref();\n\n\t\tdbRef.on('value', (snapshot) => {\n\t\t\tconst plans = snapshot.val();\n\n\t\t\tconst newPlans = []\n\t\t\tfor(let key in plans){\n\t\t\t\t// console.log(plans[key])\n\t\t\t\tconst individualPlanObject = {\n\t\t\t\t\tplanId: key, \n\t\t\t\t\tplanTitle: plans[key]\n\t\t\t\t}\n\n\t\t\t\tnewPlans.push(individualPlanObject)\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tplansList: newPlans\n\t\t\t})\n\t\t})\n\n\t\t\n\t}\n\t\n\n\t// Handle Event Functions for Name section only\n\n\thandleNameChange = (event) => {\n\t\tthis.setState({\n\t\t\tuserFirstName: event.target.value\n\t\t})\n\t\t// console.log(this.state.userFirstName);\n\t}\n\thandleSubmitName = (event) => {\n\t\tevent.preventDefault()\n\t\tconst firstNameToAdd = this.state.userFirstName;\n\t\tconsole.log(firstNameToAdd)\n\t}\n\n\thandleChangeTitle = (event) => {\n\t\tthis.setState({\n\t\t\tuserInput: event.target.value\n\t\t})\n\t}\n\n// Function to handle when each plan is added into the list\n\thandlePlanSubmit = (event) => {\n\t\tevent.preventDefault()\n\t\tconst planToBeAdded = this.state.userInput;\n\t\tconst dbRef = firebase.database().ref();\n\t\t\n\t\tif(this.state.userInput !== '' && this.state.plansList.length <= 5){\n\n\t\t\tdbRef.push(planToBeAdded)\n\t\t\tthis.setState({\n\t\t\t\tuserInput: ''\n\t\t\t})\n\t\t} else {\n\t\t\tconst MySwal = withReactContent(Swal)\n\t\t\t// Error handling: user will get an alert if they have too many plans in one day.\n\t\t\tMySwal.fire({\n \t\t\t\t onOpen: () => {\n    \t\t\t\tMySwal.clickConfirm()\n  \t\t\t\t}\n\t\t\t}).then(() => {\n\t\t\t\t\n  \t\t\t\treturn MySwal.fire({\n\t\t\t\t\t  title: \"Hello Planner!\",\n\t\t\t\t\t  icon: \"warning\",\n\t\t\t\t\t  text: \"It seems like you have a busy day already. Let's prioritize your list so that you can have a balanced day ☮️.\"\n\t\t\t\t  })\n\t\t\t})\t\n\t\t}\n\t}\n// Function to remove the item from the page & firebase if garbage can button is clicked\n\tdeleteItem = (event) => {\n\t\tconst dbRef = firebase.database().ref();\n\t\tdbRef.child(event.target.id).remove()\n\t}\n\n// Function to change the language based on the user's button click.\n\tlanguageToggle = (event) => {\n\t\tevent.preventDefault()\n\t\tconsole.log('this is French now')\n\n\t\tif(this.state.selectedLang === 'eng'){\n\t\t\tthis.setState({\n\t\t\tselectedLang: 'fr'\n\t\t})\n\t\t} else{\n\t\t\tthis.setState({\n\t\t\t\tselectedLang: 'eng'\n\t\t\t})\n\t\t}\n\n\t\t}\n\n\n\n\n\n\n\trender(){\n\t\t\n  \t\treturn (\n\t\t\n    \t\t<div className=\"app-container\">\n\t\t\t\t{/* Imported component \"Good Morning\" */}\n\t\t\t\t<GoodMorning selectedLang = {this.state.selectedLang}/>\n\n\t\t\t\t{/* Button for toggling French Copy */}\n\t\t\t\t\n\t\t\t\t<button onClick={this.languageToggle}className=\"french-button\" id=\"langButton\">{this.state.inputLabel[this.state.selectedLang].langButton}</button>\n\n\t\t\t\t{/* Add new plan section */}\n\t\t\t\t<div className=\"add-plan\">\t\t\n\t\t\t\t\t<p id=\"add\">\n\t\t\t\t\t\t{this.state.inputLabel[this.state.selectedLang].newPlan}</p>\n\n\n\t\t\t\t\t  <form onSubmit={this.handlePlanSubmit}>\n\t\t\t\t\t  <label htmlFor=\"planTitle\"></label>\n\t\t\t\t\t  <input className=\"text-input\" id=\"planTitle\" type=\"text\" value={this.state.userInput} onChange={this.handleChangeTitle} autoComplete=\"off\"/>\n\t\t\t\t\t  <button id=\"planButton\"className=\"save-day\" type=\"submit\">{this.state.inputLabel[this.state.selectedLang].planButton}</button>\n\t\t\t\t \t  </form>\n\t\t\t\t</div>\n\n\t\t\t\t{/* List of plans section */}\n\t\t\t\t<div className=\"plan-result\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{this.state.plansList.map( (planValue, i) => {\n\t\t\t\t\t\t  return(\n\t\t\t\t\t\t\t  <div className=\"plan-item\">\n\t\t\t\t\t\t\t \t <li key={i}>{planValue.planTitle}</li><span className=\"delete\"><i className=\"far fa-trash-alt\" id={planValue.planId} onClick={this.deleteItem}></i>\n\t\t\t\t\t\t\t\t  </span>\n\n\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t  \t\t)\n\t\t\t\t\t  })}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\n    \t\t</div>\n\n  \t\t);\n\n\t}\n\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}