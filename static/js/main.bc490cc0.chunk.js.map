{"version":3,"sources":["firebase.js","GoodMorning.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","GoodMorning","handleNameChange","event","setState","userFirstName","target","value","console","log","state","handleSubmitName","preventDefault","firstNameToAdd","nameOnPage","showNameResults","className","onSubmit","this","type","name","id","placeholder","onChange","autoComplete","role","alt","Component","App","handleChangeTitle","userInput","handlePlanSubmit","planToBeAdded","dbRef","database","ref","push","byeByeBookie","child","remove","deleteItem","plansList","on","snapshot","plans","val","newPlans","key","individualPlanObject","planId","planTitle","htmlFor","map","planValue","i","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc490cc0.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/database'\n\n const firebaseConfig = {\n    apiKey: \"AIzaSyApUdhpyr3u1Zu_5yLiqhncbaw6CXuXYI8\",\n    authDomain: \"daily-planner-app-71520.firebaseapp.com\",\n    databaseURL: \"https://daily-planner-app-71520.firebaseio.com\",\n    projectId: \"daily-planner-app-71520\",\n    storageBucket: \"daily-planner-app-71520.appspot.com\",\n    messagingSenderId: \"595096002439\",\n    appId: \"1:595096002439:web:a753e1b29f17565c967d22\"\n  };\n\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from 'react';\nimport './App.css';\n\nclass GoodMorning extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\t\tuserFirstName: '',\n\t\t\t\tnameOnPage: '',\n\t\t\t\t\n\t\t\t};\n\t}\n\n\n\thandleNameChange = (event) => {\n\t\tthis.setState({\n\t\t\tuserFirstName: event.target.value\n\t\t})\n\t\tconsole.log(this.state.userFirstName);\n\t}\n\n\thandleSubmitName = (event) => {\n\t\tevent.preventDefault()\n\t\tconst firstNameToAdd = this.state.userFirstName;\n\t\t// console.log(firstNameToAdd)\n\t\tthis.setState({\n\t\t\tnameOnPage: firstNameToAdd,\n\t\t\tshowNameResults: true\n\t\t})\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"enter-name\">\n\t\t\t\t<h1>Today's Plan</h1>\n\t\t\t\t<form onSubmit={this.handleSubmitName} >\n\t\t\t\t\t<input className=\"text-input\"type=\"text\" name=\"name\" id=\"name\" placeholder=\"Enter Your Name\"\n\t\t\t\t\tvalue={this.state.userFirstName} onChange={this.handleNameChange} autoComplete=\"off\"/>\n\t\t\t\t\t<input className = \"save-day\" type=\"submit\" value=\"Submit\"/>\n\t\t\t\t</form>\n\t\t\t\t<p><span className=\"aria-label\"role=\"img\" alt=\"emoji of sun\">☀️</span>Good Morning {this.state.nameOnPage} </p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default GoodMorning","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport GoodMorning from './GoodMorning.js';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\t\n\t\tthis.state = {\n\t\t\t\tuserFirstName: '',\n\t\t\t\tplansList: [],\n\t\t\t\tuserInput: ''\n\t\t\t\t\t\n\t\t\t};\n\n\t\n\t}\n\n\tcomponentDidMount(){\n\t\tconst dbRef = firebase.database().ref();\n\n\t\tdbRef.on('value', (snapshot) => {\n\t\t\tconst plans = snapshot.val();\n\n\t\t\tconst newPlans = []\n\t\t\tfor(let key in plans){\n\t\t\t\t// console.log(plans[key])\n\t\t\t\tconst individualPlanObject = {\n\t\t\t\t\tplanId: key, \n\t\t\t\t\tplanTitle: plans[key]\n\t\t\t\t}\n\n\t\t\t\tnewPlans.push(individualPlanObject)\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tplansList: newPlans\n\t\t\t})\n\t\t})\n\t}\n\t\n\n\t// Handle Event Functions for Name section only\n\n\thandleNameChange = (event) => {\n\t\tthis.setState({\n\t\t\tuserFirstName: event.target.value\n\t\t})\n\t\t// console.log(this.state.userFirstName);\n\t}\n\thandleSubmitName = (event) => {\n\t\tevent.preventDefault()\n\t\tconst firstNameToAdd = this.state.userFirstName;\n\t\tconsole.log(firstNameToAdd)\n\t}\n\n\n\n\thandleChangeTitle = (event) => {\n\t\tthis.setState({\n\t\t\tuserInput: event.target.value\n\t\t})\n\t}\n\n\thandlePlanSubmit = (event) => {\n\t\tevent.preventDefault()\n\n\t\tconst planToBeAdded = this.state.userInput;\n\n\t\tconst dbRef = firebase.database().ref();\n\t\tif(this.state.userInput !== ''){\n\n\t\t\tdbRef.push(planToBeAdded)\n\t\t\tthis.setState({\n\t\t\t\tuserInput: ''\n\t\t\t})\n\t\t}\n\t\tconsole.log(planToBeAdded)\n\t\n\t}\n\n\t\tbyeByeBookie = (event) => {\n\t\tconsole.log('delete you', event.target.id)\n\t\tconst dbRef = firebase.database().ref();\n\n\t\tdbRef.child(event.target.id).remove()\n\n\t}\n\n\t\tdeleteItem = (event) => {\n\t\tconsole.log('delete', event.target.id)\n\t\tconst dbRef = firebase.database().ref();\n\n\t\tdbRef.child(event.target.id).remove()\n\n\t}\n\n\trender(){\n  \t\treturn (\n    \t\t<div className=\"app-container\">\n\t\t\t\t\n\t\t\t\t<GoodMorning />\n\n\t\t\t\t\n\n\t\t\t\t<div className=\"add-plan\">\n\t\t\t\t\t<p>Add a plan to your schedule</p>\n\n\n\t\t\t\t\t  <form onSubmit={this.handlePlanSubmit}>\n\t\t\t\t\t  <label htmlFor=\"planTitle\"></label>\n\t\t\t\t\t  <input className=\"text-input\" id=\"planTitle\" type=\"text\" value={this.state.userInput} onChange={this.handleChangeTitle} autoComplete=\"off\"/>\n\t\t\t\t\t  <button className=\"save-day\" type=\"submit\">Add Plan </button>\n\t\t\t\t \t  </form>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"plan-result\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{this.state.plansList.map( (planValue, i) => {\n\t\t\t\t\t\t//   console.log(bookValue);\n\t\t\t\t\t\t  return(\n\t\t\t\t\t\t\t  <li key={i}>{planValue.planTitle}<span id={planValue.planId} onClick={this.deleteItem}className=\"delete\">X</span></li>\n\t\t\t\t\t  )\n\t\t\t\t\t  })}\n\t\t\t\t\t</ul>\n\n\t\t\t\t\n\t\t\t\t</div>\n\n\t\t\t\t\n\t\t\t\t\t<button className=\"save-day\">Save</button>\n\t\t\t\t\n\t\t\t\t\n    \t\t</div>\n  \t\t);\n\t}\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}